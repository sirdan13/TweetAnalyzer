package tweet.analyzer.core;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

public class ReferenceCorpus {
	
	private int totalDocuments;
	
	private HashMap<String,Integer> occurrences;
	private HashMap<String,Integer> occInDocs;
	
	
	
	
	
	public ReferenceCorpus() {
		this.occurrences = new HashMap<String,Integer>();
		this.occInDocs = new HashMap<String,Integer>();
	}





	/**
	 * Generate a ReferenceCorpus object reading word occurrences from a
	 * vocabulary (text) file generated by wordtovec
	 * @param vocabFile text file in the format <word occurrences>
	 * @throws IOException
	 */
	public void getOccFromVocab(String vocabFile) throws IOException{
		
		//open vocabulary (text) file
		File inputfile = new File(vocabFile);
		
		BufferedReader in = new BufferedReader(
				   new InputStreamReader(
		                      new FileInputStream(inputfile), "UTF8")); //togliere UTF8?
		 
				String str;
				
				//scan file
				while ((str = in.readLine()) != null) {
					
					String[] data = str.split("\\s+");
					
					//populate occurrences HashMap
					if(data[0]!= null && data[1]!=null)
						
						this.occurrences.put(data[0], Integer.parseInt(data[1]));
						//System.out.println(data[0]+" "+data[1]);

				}
				
				in.close();
		
		//set totalDocuments
		this.setTotalDocuments(this.occurrences.get("</s>"));
		
		//DEBUG
		System.out.println("TEST");
		System.out.println("Total Documents: "+this.totalDocuments);
		System.out.println("Occurences:");
		System.out.println("sanremo: "+this.occurrences.get("sanremo"));
		System.out.println("gatto: "+this.occurrences.get("gatto"));
				
	}
	
	

	//obsolete REMOVE!
	public void getOccInDocsFromCorpus(String corpusFile) throws IOException{
		
		//open vocabulary (text) file
		File inputfile = new File(corpusFile);
		
		ArrayList<String> docs = new ArrayList<String>();
		
		BufferedReader in = new BufferedReader(
				   new InputStreamReader(
		                      new FileInputStream(inputfile), "UTF8")); 
		 
				String str;
				
				//save documents to arraylist
				while ((str = in.readLine()) != null) {
					
					docs.add(str);

				}
				
				in.close();
				
				Iterator<String> it = occurrences.keySet().iterator();
				int i = 0;
				
				while(it.hasNext()){
						
					String key = it.next();
					int occ = this.occurrences.get(key);
					
					//DEBUG
					i++;
					if(i%100==0){
						System.out.println(i+"/"+docs.size());
					}
					
					//se il numero di occorrenze è 1 il termine compare in un solo documento
					//if (occ<30){ //DEBUG!!!
					if (occ==1){
						this.occInDocs.put(key, 1);
					}
					
					//altrimenti scansiona intero corpus per contare in quanti documenti appare
					else{
						
						Iterator<String> it2 = docs.iterator();
						int counter = 0;
						
						while(it2.hasNext()){
							
							String doc =  it2.next();
							
							
							
							
							//if (doc.matches(".*\\b"+key+"\\b.*")){
							if(doc.contains(key)){
								counter++;
							}
							
							
							/*if(counter >= occ){
								break;
							}*/
							
												
						}
						
						this.occInDocs.put(key, counter);
										
						
					}
					
					
					
					
				}
				
				
				
		
		//set totalDocuments
		
		//DEBUG
		System.out.println("TEST");

				
	}
	
	


	public HashMap<String, Integer> getOccInDocs() {
		return occInDocs;
	}





	public HashMap<String, Integer> getOccurrences() {
		return occurrences;
	}
	


	public int getTotalDocuments() {
		return totalDocuments;
	}



	public void setTotalDocuments(int totalDocuments) {
		this.totalDocuments = totalDocuments;
	}

}
